{"version":3,"file":"static/js/42.0e9ce3f7.chunk.js","mappings":"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","sources":["helpers/API.js","helpers/baseUrl.js","components/MovieProfile/MovieProfile.styled.js","components/MovieProfile/MovieProfile.jsx","components/BackClick.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a34ad8d88567ad499afdd0c300d9d1af';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchTrendMovieById = async id => {\n  const resp = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return resp.data;\n};\n\nexport const fetchCast = async id => {\n  const resp = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return resp.data.cast;\n};\n\nexport const fetchReviews = async id => {\n  const resp = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return resp.data.results;\n};\n\nexport const fetchSearchedMovies = async searchQuery => {\n  const resp = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&include_adult=false`\n  );\n  return resp.data.results;\n};\n","export const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Section = styled.div`\n  padding: 20px;\n`;\nexport const Wrap = styled.div`\n  display: flex;\n  gap: 20px;\n  padding: 10px;\n`;\nexport const Poster = styled.img`\n  border-radius: 10px;\n  height: 500px;\n`;\nexport const InfoWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\nexport const TextWrap = styled.p`\n  font-size: 18px;\n`;\nexport const GenresWrap = styled.ul`\n  display: flex;\n  gap: 10px;\n`;\nexport const AddSide = styled.div`\n  margin-top: 25px;\n`;\nexport const AddList = styled.ul`\n  display: flex;\n  gap: 20px;\n  padding-left: 10px;\n`;\nexport const AddItem = styled.li`\n  padding: 10px 20px;\n  background-image: linear-gradient(\n    225deg,\n    #c6ffdd 0%,\n    #fbd786 40%,\n    #f7797d 100%\n  );\n`;\nexport const StyledLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  font-size: 20px;\n`;\n","import { baseImgUrl } from 'helpers/baseUrl';\nimport { Outlet } from 'react-router-dom';\nimport {\n  AddItem,\n  AddList,\n  AddSide,\n  GenresWrap,\n  InfoWrap,\n  Poster,\n  Section,\n  StyledLink,\n  TextWrap,\n  Wrap,\n} from './MovieProfile.styled';\nimport PropTypes from 'prop-types';\nimport { Suspense } from 'react';\n\nexport const MovieProfile = ({\n  details: { poster_path, title, name, vote_average, overview, genres },\n}) => {\n  return (\n    <Section>\n      <Wrap>\n        <Poster src={baseImgUrl + poster_path} alt={title || name} />\n\n        <InfoWrap>\n          <h1>{title || name}</h1>\n          <TextWrap>User Score: {Math.round(vote_average * 10)}%</TextWrap>\n          <h2>Overview</h2>\n          <TextWrap>{overview}</TextWrap>\n          <h3>Genres</h3>\n          <GenresWrap>\n            {genres && genres.map(item => <li key={item.id}>{item.name}</li>)}\n          </GenresWrap>\n        </InfoWrap>\n      </Wrap>\n      <AddSide>\n        <AddList>\n          <AddItem>\n            <StyledLink to=\"cast\">Cast</StyledLink>\n          </AddItem>\n          <AddItem>\n            <StyledLink to=\"reviews\">Reviews</StyledLink>\n          </AddItem>\n        </AddList>\n\n        <Suspense fallback={<div>Loading</div>}>\n          <Outlet />\n        </Suspense>\n      </AddSide>\n    </Section>\n  );\n};\nMovieProfile.propTypes = {\n  details: PropTypes.shape({\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    name: PropTypes.string,\n    vote_average: PropTypes.number,\n    overview: PropTypes.string,\n  }),\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\nconst StyledLink = styled(NavLink)`\n  display: flex;\n  margin-top: 15px;\n  margin-left: 30px;\n  text-decoration: none;\n  width: 70px;\n  font-size: 18px;\n  padding: 10px;\n  background-color: white;\n  border-radius: 15px;\n  color: black;\n  border: 1px solid grey;\n`;\n\nexport const BackClick = ({ to }) => {\n  return (\n    <>\n      <StyledLink to={to}>Go back</StyledLink>\n    </>\n  );\n};\n","import { fetchTrendMovieById } from 'helpers/API';\nimport { useEffect, useRef, useState } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { MovieProfile } from 'components/MovieProfile/MovieProfile';\nimport { BackClick } from 'components/BackClick';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams('');\n  const [movieById, setMovieById] = useState({});\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n  useEffect(() => {\n    const getMovie = async () => {\n      try {\n        const movieById = await fetchTrendMovieById(movieId);\n        setMovieById(movieById);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    getMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      <BackClick to={backLinkHref.current} />\n      {movieById && <MovieProfile details={movieById} />}\n    </>\n  );\n};\nexport default MovieDetails;\n"],"names":["axios","API_KEY","fetchTrendingMovies","response","data","results","fetchTrendMovieById","id","resp","fetchCast","cast","fetchReviews","fetchSearchedMovies","searchQuery","baseImgUrl","Section","styled","Wrap","Poster","InfoWrap","TextWrap","GenresWrap","AddSide","AddList","AddItem","StyledLink","NavLink","MovieProfile","details","poster_path","title","name","vote_average","overview","genres","src","alt","Math","round","map","item","to","Suspense","fallback","BackClick","movieId","useParams","useState","movieById","setMovieById","location","useLocation","backLinkHref","useRef","state","from","useEffect","getMovie","console","log","current"],"sourceRoot":""}